// Copyright 2021 Northern.tech AS
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// Code generated by mockery v2.5.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/mendersoftware/reporting/model"
	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// BulkIndexDevices provides a mock function with given fields: ctx, devices
func (_m *Store) BulkIndexDevices(ctx context.Context, devices []*model.Device) error {
	ret := _m.Called(ctx, devices)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.Device) error); ok {
		r0 = rf(ctx, devices)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDevIndex provides a mock function with given fields: ctx, tid
func (_m *Store) GetDevIndex(ctx context.Context, tid string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, tid)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]interface{}); ok {
		r0 = rf(ctx, tid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, tid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevice provides a mock function with given fields: ctx, tenant, devid
func (_m *Store) GetDevice(ctx context.Context, tenant string, devid string) (*model.Device, error) {
	ret := _m.Called(ctx, tenant, devid)

	var r0 *model.Device
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *model.Device); ok {
		r0 = rf(ctx, tenant, devid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Device)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, tenant, devid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexDevice provides a mock function with given fields: ctx, device
func (_m *Store) IndexDevice(ctx context.Context, device *model.Device) error {
	ret := _m.Called(ctx, device)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Device) error); ok {
		r0 = rf(ctx, device)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Migrate provides a mock function with given fields: ctx
func (_m *Store) Migrate(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, query
func (_m *Store) Search(ctx context.Context, query interface{}) (model.M, error) {
	ret := _m.Called(ctx, query)

	var r0 model.M
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) model.M); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.M)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevice provides a mock function with given fields: ctx, tenantID, deviceID, updateDev
func (_m *Store) UpdateDevice(ctx context.Context, tenantID string, deviceID string, updateDev *model.Device) error {
	ret := _m.Called(ctx, tenantID, deviceID, updateDev)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *model.Device) error); ok {
		r0 = rf(ctx, tenantID, deviceID, updateDev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
